*pcpheader.txt*		PCP Header		Last change: 2002-10-24


Header writing and updating	*header* *header-updating* *header-plugin*

Header writing enables Vim to automatically write and update headers to
arbitrary filetypes.  It works by a templating method, where the user provides
standardized templates and when editing a new file Vim will check if a
template exists for the 'filetype' and use it.  The user will then be asked to
fill in some information before starting to edit the file and Vim will then
use this information to generate a new file from the template.

This is very useful, for example, when writing code source files for a project
where every file must have a standardized header which still must vary from
file to file.  Examples of this are given in the |header-examples|-section.

1.   Quick start		|header-qstart|
2.   Options and variables	|header-variables|
3.   Template files		|header-tamplates|
4.   Examples			|header-examples|

NOTE: The functionality mentioned here is for a Vim plugin, so check out
|add-plugin| if you don't understand how to enable/use Vim plugins.
You can avoid loding this plugin by setting the "loaded_pcp_header" variable
in your |vimrc| file: >
	:let loaded_pcp_header = 1

{Vi does not have any of this}

==============================================================================
1. Quick start						*header-qstart*

When you have installed this plugin (see |add-plugin| for more info on
installation of plugins) you're pretty much set up to use it.  There are
however some things you should do before using it to get reasonable defaults
when creating new files with headers.  The following lines should be placed
somewhere in your |vimrc| file: >

	:let pcp_plugins_username = <Your Name>
	:let pcp_plugins_url = <A URL you'd like to see in the header>
	:let pcp_plugins_dateformat = <A date format as in strftime()>

Substitute the <...> with your preference, or leave them to their defaults.
At least the two first should normally be set to something interesting, where
the third has a decent default value, see |header-variables| for more
information on other variables and default values.

Make sure that you have placed the template/ directory in your ~/.vim/
directory (this is actually configurable, but more on that later).  When you
start editng a file with a 'filetype' for which there exists a
template.'filetype' file in the above mentioned directory, you will be asked a
couple of questions regarding various parts of the template that will perhaps
vary from file to file.  Simply type in the information in the input line at
the bottom of the main Vim window, or leave it empty to use the default values
shown in the prompt, and press <Enter>.  When all questions have been answered
you will get a new file based on the template and the information provided.
Then you are basically done with using the |header-plugin|.

However, there are some parts of a typical file header that need to be updated
after the file has been created.  One such thing is revision dates.  You often
see linus such as >

	Latest Revision: 2002-10-24

in headers.  It would be neat if these date-lines would be updated
automatically instead of you being forced to update them by hand every time
you make a revision of a file.  Thankfully the |header-plugin| does just that
for you.  When a file is about to be written to disk (with :write) or similar
it searches for a given |pattern| in the file and modifies it to match
suitable information, e.g. todays date and not yesterdays.

==============================================================================
2. Options and variables				*header-variables*

The |header-plugin| is extremely configurable as it needs to be.  Almost every
element in the plugin can be modified in some way to meet user needs.  Here
follows a list of the variables at the users disposal.

g:pcp_header_template_path			*pcp_header_template_path*
------------------------

default: >
	~/.vim/template/

This variable specifies the directory where the |template-file|s can be found.

2.1. Variables for template file definitions
--------------------------------------------

There are a few variables that specify how special lines are marked in the
|header-template| files.  However, these variables should almost never be
changed as changing them would ruin interoperability between different
template files.

g:pcp_header_file_description_regexp	*pcp_header_file_description_regexp*
------------------------------------

default: >
	<File-Description>

This variable specifies what |regular-expression| to use when searching for
the file-description line in the template.  The file-description line will
look something like this when substituted into the template: >

	filename.ext: This file deals with this and that.

where filename.ext: is generated by the |header-plugin| and what comes after
is typed in by the user upon creation.

g:pcp_header_copyright_regexp			*pcp_header_copyright_regexp*
-----------------------------

default: >
	<Copyright>

This variable specifies what |regular-expression| to use when searching for
the copyright notification line in the template.  The copyright notification
is a line similar to the following when substituted: >

	Copyright (C) Year Copyrightholder

where Year is based upon this years year and Copyrightholder is based upon the 
g:pcp_plugins_username variable.  This line can be changed to something
arbitrary with the |pcp_header_copyright| variable though.

g:pcp_header_license_regexp			*pcp_header_license_regexp*
---------------------------

default: >
	<License>

This variable specifies what |regular-expression| to use when searching for
the license insertion line in the template.  The license is read from a one of
the license file in the template/ directory (see |header-template|).  The
license used is retrieved from user input or the variable
|pcp_header_license|.  The default is to use the default license, intuitively
enough.  This license is called default.LICENSE in the template/ directory.

NOTE: At the moment the variables above are global (the g: prefix, see
|internal-variables|) which may pose some problems where different 'filetype's
have different formats and |pattern|s in their respective headers, but this
has not posed a problem yet.  If it does, please contact me (see the URL in
the plugin file, or look me up at http://vim.sourceforge.net/).

NOTE: The following variables exist in both a bufferlocal and a global
version.  The bufferlocal variable is checked for first and if it exists it is
used.  If it does not exist, then the global version, which gets set if it
does not exist upon initialization of the plugin, is used.  It is appropriate
to use the bufferlocal variable for specific 'filetype's that must differ from
the default; one can then put a line like (substituting appropriately) >
	let b:pcp_header_variable_name = <new local value>
in a |ftplugin| file.

pcp_header_author_regexp			*pcp_header_author_regexp*
------------------------

default: >
	^\(.\{1,3}\<Author\>\s*:\).*$

This variable specifies what |regular-expression| to use when searching for
the author insertion line in the template.  This |regular-expression| MUST
cover a whole line (using ^ and $ anchors) AND contain a \(\) grouping that
will be kept after each substitution, to allow updating later.  The default
allows three arbitrary characters before the string Author appears, which must
be followed by optional white-space and a colon, ':'.  An example template that
matches this line, and will thus get updated with the authors username upon
creation would be: >

	| * Author:

where | marks the leftmost column of the file.

pcp_header_url_regexp				*pcp_header_url_regexp*
---------------------

default: >
	^\(.\{1,3}\<URL\>\s*:\).*$

This variable specifies what |regular-expression| to use when searching for
the URL insertion line in the template.  This |regular-expression| MUST
cover a whole line (using ^ and $ anchors) AND contain a \(\) grouping that
will be kept after each substitution, to allow updating later.  It works the
same as the one for |pcp_header_author_regexp| but with the text 'URL' instead
of 'Author'.

pcp_header_revised_on_regexp			*pcp_header_revised_on_regexp*
----------------------------

default: >
	^\(.\{1,3}\<Latest Revision\>\s*:\).*$

This variable specifies what |regular-expression| to use when searching for
the URL insertion line in the template.  This |regular-expression| MUST
cover a whole line (using ^ and $ anchors) AND contain a \(\) grouping that
will be kept after each substitution, to allow updating later.  It works the
same as the one for |pcp_header_author_regexp| but with the text
'Latest Revision' instead of 'Author'.

This is the most interesting of the above variables, as it is the only one,
currently, to be used whenever the file is written to disk.  The other ones
are only used upon creation of the file.

2.2. Variables that affect what gets inserted
---------------------------------------------

pcp_header_copyright				*pcp_header_copyright*
--------------------

default: >
	Copyright (C) Year Copyrightholder

where year is strftime("%Y"), i.e. the year of today, and Copyrightholder is
provided from user input with the default being g:pcp_plugins_username.  This
variable exists, just like the ones above, in both a bufferlocal and a global
version.  Neither, however, exist by default.  If you know what your copyright
notices should look like you can set them in your |vimrc| file or in a
|ftplugin| file.  Using the default should work most of the time, but it's an
extra question before starting your editing session, so if you can't stand
that then set it in one of the above ways to get rid of annoying questions.

pcp_header_license				*pcp_header_license*
------------------

default: >
	default.LICENSE

This variable works like the |pcp_header_copyright| and if you can't stand
pressing <Enter> an extra time before editing, set it as described.  If it
isn't set then you will be asked to enter a name of the license to use (e.g.
GPL, LPGL, BSD, ...). the default is to use the default license, which is the
file 'default.LICENSE' in the template/ directory (see 
|pcp_header_template_path|).

g:pcp_plugins_username				*pcp_plugins_username*
----------------------

default: >
	<unknown>

This variable is used wherever the name of the author is needed.  It is often
of the form: >

	Firstname Lastname <user@domain.tld>

g:pcp_plugins_url				*pcp_plugins_url*
-----------------

default: >
	<unknown>

This variable is used wherever the URL of the author is needed.  It is often
of the form: >

	protocol://sld.domain.tld/

g:pcp_plugins_dateformat			*pcp_plugins_dateformat*
------------------------

default: >
	%Y-%m-%d	

This variable is used wherever a date is needed.  The default is
Year-Month-Day with a 4 digit year and 2 digit months and days.

=============================================================================
3. Template files					*header-templates*

Template files adhere to the following form: >

	| Header line 1
	| Header line 2
	| ....
	| Header line n
	|
	| Footer

where | marks the leftmost column.  Header lines can contain any of the above
mention |regular-expression|s and will then be modified appropriately.  The
Footer is optional, but the header must be followed by a blank line, as the
plugin scans the file for header lines until a blank line is found.  If you
don't separate the header from the rest of the file with a blank line you
might end up substituting things you do not care to substitute; so be warned!

=============================================================================
4. Examples						*header-examples*

Here are some examples of template files with headers.  The first one is for C
source files: >

	/*********************************************************************
	 * 
	 * <File-Description>
	 * 
	 * <Copyright>
	 * 
	 * <License>
	 * 
	 * Author:
	 * 
	 * Latest Revision:
	 * 
	 ********************************************************************/

	/* Includes *********************************************************/

	/* Defines **********************************************************/

	/* Type Definitions *************************************************/

	/* Function Declarations ********************************************/

	/* Global Variables *************************************************/

	/* Function Implementations *****************************************/

	/* vim: set sts=0 sw=8 ts=8: ****************************************/

The header here is everything up to the first blank line (right above the line
with the text 'Includes'.  There are a number of lines that will be updated
with useful information in the header as you can hopefully tell if you have
read the rest of this document.

The next example is for Vim-script (|vim-script-intro|) files: >

	" <File-Description>
	" Author:
	" Latest Revision:

	" vim: set sts=4 sw=4:

Here every line in the header will be updated when a new Vim-script file is
created.

That is it for now. Hopefully you can write your own template files now;
enjoy! If your template file is universal enough and of possible interest to
others, please do not hesitate to send me a copy and I will try to include it
in the plugin package.

 vim:tw=78:sw=4:ts=8:ft=help:norl:
